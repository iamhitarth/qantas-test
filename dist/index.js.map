{"version":3,"sources":["../index.js"],"names":["express","require","app","bodyParser","flightsFilter","use","urlencoded","extended","json","port","process","env","PORT","err","req","res","next","SyntaxError","status","get","message","post","payload","body","flights","filtered","getFlights","listen","console","log"],"mappings":";;AAAA,IAAIA,UAAUC,QAAQ,SAAR,CAAd;AACA,IAAIC,MAAMF,SAAV;AACA,IAAIG,aAAaF,QAAQ,aAAR,CAAjB;AACA,IAAIG,gBAAgBH,QAAQ,qBAAR,CAApB;;AAEAC,IAAIG,GAAJ,CAAQF,WAAWG,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAL,IAAIG,GAAJ,CAAQF,WAAWK,IAAX,EAAR;;AAEA,IAAIC,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAA/B;;AAEAV,IAAIG,GAAJ,CAAQ,UAASQ,GAAT,EAAcC,GAAd,EAAmBC,GAAnB,EAAwBC,IAAxB,EAA8B;;AAEpC,MAAIH,eAAeI,WAAf,IAA8BJ,IAAIK,MAAJ,KAAe,GAA7C,IAAoD,UAAUL,GAAlE,EAAuE;;AAErEE,QAAIG,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AACnB,eAAS;AADU,KAArB;AAGD;AAEF,CATD;;AAWAN,IAAIiB,GAAJ,CAAQ,GAAR,EAAa,UAACL,GAAD,EAAMC,GAAN,EAAc;AACzBA,MAAIP,IAAJ,CAAS,EAAEY,SAAS,gDAAX,EAAT;AACD,CAFD;;AAIAlB,IAAImB,IAAJ,CAAS,GAAT,EAAc,UAACP,GAAD,EAAMC,GAAN,EAAc;AAC1B,MAAIO,UAAUR,IAAIS,IAAlB;;AAEA,MAAGD,WAAWA,QAAQE,OAAtB,EAA8B;;AAE5B,QAAIC,WAAWrB,cAAcsB,UAAd,CAAyBJ,QAAQE,OAAjC,EAA0C,KAA1C,EAAiD,KAAjD,CAAf;AACAT,QAAIP,IAAJ,CAAS,EAAEgB,SAASC,QAAX,EAAT;AAED,GALD,MAKK;;AAEHV,QAAIG,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqB;AACnB,eAAS;AADU,KAArB;AAID;AACF,CAfD;;AAiBAN,IAAIyB,MAAJ,CAAWlB,IAAX;;AAEAmB,QAAQC,GAAR,2CAAoDpB,IAApD","file":"index.js","sourcesContent":["let express = require('express');\nlet app = express();\nlet bodyParser = require('body-parser');\nlet flightsFilter = require('./lib/flightsFilter');\n\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\n\nlet port = process.env.PORT || 8080;\n\napp.use(function(err, req, res, next) {\n\n  if (err instanceof SyntaxError && err.status === 400 && 'body' in err) {\n\n    res.status(400).json({\n      'error': 'Error parsing JSON'\n    });\n  }\n\n});\n\napp.get('/', (req, res) => {\n  res.json({ message: 'Just testing Qantas test API is up and running' });\n});\n\napp.post('/', (req, res) => {\n  let payload = req.body;\n\n  if(payload && payload.flights){\n\n    let filtered = flightsFilter.getFlights(payload.flights, 'SYD', false);\n    res.json({ flights: filtered });\n\n  }else{\n\n    res.status(400).json({\n      'error': 'Invalid request payload'\n    });\n\n  }\n});\n\napp.listen(port);\n\nconsole.log(`Qantas test API is up and running on ${port}`);\n"]}